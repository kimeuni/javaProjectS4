<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaProjectS4.dao.MemberDAO">
	<select id="getMemberMidCheck" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select *,timestampdiff(day,lastDate,now()) as date_diff from memberS where mid = #{mid};
	</select>
	<select id="getMemberNickNameCheck" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select * from memberS where nickName = #{nickName};
	</select>
	<select id="getMemberEmailCheck" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select * from memberS where email = #{email};
	</select>
	<select id="getMemberEmailTokenCheck" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select *,timestampdiff(day,lastDate,now()) as date_diff from memberS where token = #{token} and email = #{email};
	</select>
	<select id="getMemberMidEmailCheck" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select * from memberS where mid = #{mid} and email = #{email};
	</select>
	<select id="getTitleList" resultType="com.spring.javaProjectS4.vo.ReasonTitleVO">
		select * from reasonTitleS;
	</select>
	
	<insert id="setMemberJoin">
		insert into memberS values(default,#{vo.mid},#{vo.pwd},#{vo.name},#{vo.nickName},#{vo.address},#{vo.email},#{vo.gender},default,default,default,default,default,#{vo.adYN},default);
	</insert>
	<insert id="setKakaoMemberInput1">
		insert into memberS (mid, pwd, name, nickName, address, email, gender,token) values(#{mid},#{pwd},#{nickName},#{nickName},'',#{email},'','kakao');
	</insert>
	<insert id="setKakaoMemberInput2">
		insert into memberS (mid, pwd, name, nickName, address, email, gender,token) values(#{mid},#{pwd},#{name},#{nickName},'',#{email},'','kakao');
	</insert>
	<insert id="setUserDelReason">
		insert into userDelReasonS values (default,#{whyDel},#{why},default);
	</insert>
	
	<update id="setKakaoFirstUpdatInfor">
		update memberS set mid = #{mid}, address = #{address}, gender = #{gender}, adYN = #{adYN} where email = #{email} and token = 'kakao';
	</update>
	<update id="setMemberPwdUpdate">
		update memberS set pwd = #{pwd} where mid = #{mid};
	</update>
	<update id="setUpdateLastDate">
		update memberS set lastDate = now() where mid = #{mid};
	</update>
	<update id="setUserDelUpdateY">
		update memberS set userDel = 'Y' where mid = #{mid};
	</update>
	<update id="setUserDelUpdateN">
		<if test="token == 'kakao'">
			update memberS set userDel = 'N' where email = #{mid} and token = #{token};
		</if>
		<if test="token != 'kakao'">
			update memberS set userDel = 'N' where mid = #{mid} and token = #{token};
		</if>
	</update>
	<update id="setInfoUpdate">
		update memberS set name = #{name}, nickName = #{nickName}, email = #{email}, address = #{address} where mid = #{mid};
	</update>
</mapper>