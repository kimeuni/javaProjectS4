<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaProjectS4.dao.AdminDAO">
	<select id="getMemberList" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select *,timestampdiff(day,lastDate,now()) as date_diff from memberS order by idx limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getMemberSearchList" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select *,timestampdiff(day,lastDate,now()) as date_diff from memberS where ${part} like concat('%',#{searchString},'%')order by idx limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getMemberAllTotRecCnt" resultType="int">
		select count(*) from memberS;
	</select>
	<select id="getMemberSearchTotRecCnt" resultType="int">
		select count(*) from memberS where ${part} like concat('%',#{searchString},'%');
	</select>
	<select id="getUserDelList" resultType="com.spring.javaProjectS4.vo.MemberVO" >
		select *,timestampdiff(day,lastDate,now()) as date_diff from memberS where userDel='Y' order by lastDate limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getUserDelTotRecCnt" resultType="int">
		select count(*) from memberS where userDel = 'Y';
	</select>
	<select id="getNoticeAllList" resultType="com.spring.javaProjectS4.vo.NoticeVO">
		select *,timestampdiff(hour,nDate,now()) as hour_diff,dateDiff(now(),nDate) as date_diff from noticeS order by nDate desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getNoticeIdx" resultType="com.spring.javaProjectS4.vo.NoticeVO">
		select * from noticeS where idx = #{idx};
	</select>
	<select id="getFAQAllList" resultType="com.spring.javaProjectS4.vo.FAQVO">
		select * from FAQS order by idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getFAQIdx" resultType="com.spring.javaProjectS4.vo.FAQVO">
		select * from FAQS where idx = #{idx};
	</select>
	<select id="getAdYEmailList" resultType="String">
		select email from memberS where adYN = 'Y' and userDel = 'N' group by email;
	</select>
	<select id="getReasonTitleList" resultType="com.spring.javaProjectS4.vo.ReasonTitleVO">
		select * from reasonTitleS order by code;
	</select>
	<select id="getAdAllList" resultType="com.spring.javaProjectS4.vo.MainAdvertisementVO">
		select * from mainAdvertisementS order by idx;
	</select>
	<select id="getMainAdIdx" resultType="com.spring.javaProjectS4.vo.MainAdvertisementVO">
		select * from mainAdvertisementS where idx = #{idx};
	</select>
	<select id="getMainAdOpenSwY" resultType="com.spring.javaProjectS4.vo.MainAdvertisementVO">
		select * from mainAdvertisementS where openSw = 'Y';
	</select>
	<select id="getMailAllList" resultType="com.spring.javaProjectS4.vo.EventMailVO">
		select * from eventMailS order by idx;
	</select>
	<select id="getEventMailIdx" resultType="com.spring.javaProjectS4.vo.EventMailVO">
		select * from eventMailS where idx = #{idx};
	</select>
	<select id="getAskStatusList" resultType="com.spring.javaProjectS4.vo.AskVO">
		select *,timestampdiff(hour,askDate,now()) as hour_diff,datediff(now(),askDate) as date_diff,
		(select datediff(now(),ansDate) from answerS an where ask.idx = an.askIdx ) as ans_date_diff
		 from askS ask where status = #{status} limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getAskStatusRecCnt" resultType="int">
		select count(*) from askS where status = #{part};
	</select>
	<select id="getAskIdx" resultType="com.spring.javaProjectS4.vo.AskVO">
		select *,(select datediff(now(),ansDate) from answerS an where ask.idx = an.askIdx ) as ans_date_diff from askS ask where idx = #{idx}
	</select>
	<select id="getUserAskReport" resultType="com.spring.javaProjectS4.vo.UserReportVO">
		select * from userReportS where part = #{part} and partIdx = ${partIdx};
	</select>
	<select id="getAnswerAskIdx" resultType="com.spring.javaProjectS4.vo.AnswerVO">
		select * from answerS where askIdx = #{idx};
	</select>
	<select id="getTopCategoryList" resultType="com.spring.javaProjectS4.vo.TopCategoryVO">
		select * from topCategoryS order by idx;
	</select>
	<select id="getMidCategoryList" resultType="com.spring.javaProjectS4.vo.MidCategoryVO">
		select * from midCategoryS order by idx;
	</select>
	<select id="getBtmCategoryList" resultType="com.spring.javaProjectS4.vo.BtmCategoryVO">
		select * from btmCategoryS order by idx;
	</select>
	<select id="getTopMidCategoryList" resultType="com.spring.javaProjectS4.vo.MidCategoryVO">
		select * from midCategoryS where topCategoryIdx = #{top};
	</select>
	<select id="getMidBtmCategoryList" resultType="com.spring.javaProjectS4.vo.BtmCategoryVO">
		select * from btmCategoryS where midCategoryIdx = #{midCa};
	</select>
	<select id="getTopCategoryTableList" resultType="com.spring.javaProjectS4.vo.TopCategoryVO">
		select toc.*,(select count(*) from midCategoryS mic where toc.idx = mic.topCategoryIdx ) as midCnt,
		(select count(*) from btmCategoryS btc where toc.idx = btc.topCategoryIdx ) as btmCnt,
		(select count(*) from usedS usd where usd.topCategoryIdx = toc.idx ) as usedCnt 
		from topCategoryS toc, midCategoryS mi, btmCategoryS bt group by toc.idx order by toc.idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getTopCategoryRecCnt" resultType="int">
		select count(*) from topCategoryS;
	</select>
	<select id="getMidCategoryTableList" resultType="com.spring.javaProjectS4.vo.MidCategoryVO">
		select mi.*,(select count(*) from btmCategoryS btc where mi.idx = btc.midCategoryIdx ) as btmCnt,
		(select count(*) from usedS usd where usd.midCategoryIdx = mi.idx ) as usedCnt from 
		 midCategoryS mi, btmCategoryS bt group by mi.idx order by mi.idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getMidCategoryRecCnt" resultType="int">
		select count(*) from midCategoryS;
	</select>
	<select id="getBtmCategoryTableList" resultType="com.spring.javaProjectS4.vo.BtmCategoryVO">
		select *,(select count(*) from usedS usd where usd.btmCategoryIdx = bt.idx ) as usedCnt from 
		 btmCategoryS bt order by bt.idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getBtmCategoryRecCnt" resultType="int">
		select count(*) from btmCategoryS;
	</select>
	<select id="getUsedReportList" resultType="com.spring.javaProjectS4.vo.UsedReportVO">
		select *,(select title from usedS usd where usd.idx = usr.usedIdx ) as title from usedReportS usr order by usr.idx desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getUsedReportRecCnt" resultType="int">
		select count(*) from usedReportS;
	</select>
	<select id="getUsedIdx" resultType="com.spring.javaProjectS4.vo.UsedVO">
		select * from usedS where idx = #{usedIdx};
	</select>
	<select id="getUsedReportIdx" resultType="com.spring.javaProjectS4.vo.UsedReportVO">
		select * from usedReportS where idx = #{idx};
	</select>
	<select id="getMapOne" resultType="com.spring.javaProjectS4.vo.MapVO">
		select * from mapS order by idx desc limit 1;
	</select>
	<select id="getEmoticonList" resultType="com.spring.javaProjectS4.vo.EmoticonVO">
		select * from emoticonS order by idx desc;
	</select>
	<select id="getUserReportList" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select * from memberS where totReportCnt > 0 and userDel = 'N' order by totReportCnt desc limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getUserReportRecCnt" resultType="int">
		select count(*) from memberS where totReportCnt > 0 and userDel = 'N';
	</select>
	<select id="getChattingList" resultType="com.spring.javaProjectS4.vo.ChatVO">
		select *,timestampdiff(day,chatDate,now()) as date_diff from chatS order by chatDate limit #{startIndexNo},#{pageSize};
	</select>
	<select id="getMemberRegionCnt" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select (select count(*) from memberS where address like concat('%','인천','%')) as incheonCnt,
		(select count(*) from memberS where address like concat('%','서울','%') ) as seoulCnt,
		(select count(*) from memberS where address like concat('%','경기','%') ) as gyeonggiCnt,
		(select count(*) from memberS where address like concat('%','강원도특별자치도','%') ) as gangwonCnt,
		(select count(*) from memberS where address like concat('%','충남','%') ) as chungnamCnt,
		(select count(*) from memberS where address like concat('%','충북','%') ) as chungbukCnt,
		(select count(*) from memberS where address like concat('%','경북','%') ) as gyeongbukCnt,
		(select count(*) from memberS where address like concat('%','경남','%') ) as gyeongnamCnt,
		(select count(*) from memberS where address like concat('%','부산','%') ) as busanCnt,
		(select count(*) from memberS where address like concat('%','울산','%') ) as ulsanCnt,
		(select count(*) from memberS where address like concat('%','대구','%') ) as daeguCnt,
		(select count(*) from memberS where address like concat('%','전북특별자치도','%') ) as jeonbukCnt,
		(select count(*) from memberS where address like concat('%','전남','%') ) as jeonnamCnt,
		(select count(*) from memberS where address like concat('%','제주특별자치도','%') ) as jejuCnt,
		(select count(*) from memberS where address like concat('%','광주','%') ) as gwangjuCnt,
		(select count(*) from memberS where address like concat('%','대전','%') ) as daejeonCnt
		 from memberS limit 1;
	</select>
	<select id="getReasonTitleCnt" resultType="com.spring.javaProjectS4.vo.ReasonTitleVO">
		select (select count(*) from userdelReasonS where titleCode = 'A0001') as cnt1,
			(select title from reasonTitleS where Code = 'A0001') as title1,
			(select count(*) from userdelReasonS where titleCode = 'A0002') as cnt2,
			(select title from reasonTitleS where Code = 'A0002') as title2,
			(select count(*) from userdelReasonS where titleCode = 'A0003') as cnt3,
			(select title from reasonTitleS where Code = 'A0003') as title3,
			(select count(*) from userdelReasonS where titleCode = 'A0004') as cnt4,
			(select title from reasonTitleS where Code = 'A0004') as title4,
			(select count(*) from userdelReasonS where titleCode = 'A0005') as cnt5,
			(select title from reasonTitleS where Code = 'A0005') as title5,
			(select count(*) from userdelReasonS where titleCode = 'A0006') as cnt6,
			(select title from reasonTitleS where Code = 'A0006') as title6,
			(select count(*) from userdelReasonS where titleCode = 'A0007') as cnt7,
			(select title from reasonTitleS where Code = 'A0007') as title7,
			(select count(*) from userdelReasonS where titleCode = 'A9999') as cnt8,
			(select title from reasonTitleS where Code = 'A9999') as title8
			from reasonTitleS limit 1;
	</select>
	
	
	<insert id="setNoticeInput">
		insert into noticeS values (default,#{vo.nickName},#{vo.title},#{vo.content},default,default,#{vo.openSw});
	</insert>
	<insert id="setFAQInput">
		insert into FAQS values (default,#{vo.category},#{vo.question},#{vo.answer});
	</insert>
	<insert id="setEventEmailSave">
		insert into eventMailS values (default,#{title},#{content},default,#{fName});
	</insert>
	<insert id="setDelTitleInput">
		insert into reasonTitleS values (#{code},#{title},#{displayNone});
	</insert>
	<insert id="setAdInput">
		insert into mainAdvertisementS values (default,#{mImg},#{url},default,default);
	</insert>
	<insert id="setUserReportInput">
		insert into userReportS values (default,#{mid},#{part},#{partIdx},default,#{reason});
	</insert>
	<insert id="setAnsInput">
		insert into answerS values (default,#{idx},#{content},default);
	</insert>
	<insert id="setTopCategoryInput">
		insert into topCategoryS values (default,#{topCategoryName});
	</insert>
	<insert id="setMidCategoryInput">
		insert into midCategoryS values (default,#{topCategoryIdx},#{midCategoryName})
	</insert>
	<insert id="setBtmCategoryInput">
		insert into btmCategoryS values (default,#{topCategoryIdx},#{midCategoryIdx},#{btmCategoryName});
	</insert>
	<insert id="getMapInput">
		insert into mapS values (default,#{vo.place},#{vo.address},#{vo.latitude},#{vo.longitude},default)
	</insert>
	<insert id="setEmoticonInput">
		insert into emoticonS values (default,#{imgStr},default);
	</insert>
	
	<update id="setNoticeUpdate">
		update noticeS set title = #{vo.title}, content = #{vo.content}, nDate = now(), openSw = #{vo.openSw} where idx = #{vo.idx};
	</update>
	<update id="setFAQUpdate">
		update FAQS set category = #{vo.category}, question = #{vo.question}, answer = #{vo.answer} where idx = #{vo.idx};
	</update>
	<update id="setDisplayNoneUpdate">
		update reasonTitleS set displayNone = #{displayNone} where code = #{code};
	</update>
	<update id="setAdOpenSwNo">
		update mainAdvertisementS set openSw = 'N' where idx = #{idx};
	</update>
	<update id="setAdOpenSwYes">
		update mainAdvertisementS set openSw = 'Y' where idx = #{idx};
	</update>
	<update id="setMemberReportCntUpdate">
		update memberS set totReportCnt = (select count(*) from userReportS where mid = #{mid}) where mid = #{mid};
	</update>
	<update id="setAskStatusUpdate">
		update askS set status = '답변완료' where idx = #{idx};
	</update>
	<update id="setUserAccountRUpdate">
		update memberS set userDel = 'R' where mid = #{mid};
	</update>
	
	<delete id="setUserAccountDel">
		delete from memberS where mid = #{mid};
	</delete>
	<delete id="setNoticeDel">
		delete from noticeS where idx = #{idx};
	</delete>
	<delete id="setFAQDel">
		delete from FAQS where idx = #{idx};
	</delete>
	<delete id="setUserShowDelMid">
		delete from UserShowAdvertisementS where mid = #{mid};
	</delete>
	<delete id="setReasonTitleDel">
		delete from reasonTitleS where code = #{code};
	</delete>
	<delete id="setUserDelReasonDel">
		delete from userDelReasonS where titleCode = #{code};
	</delete>
	<delete id="setMainAdDelete">
		delete from mainAdvertisementS where idx = #{idx};
	</delete>
	<delete id="setMailDelete">
		delete from eventMailS where idx = #{idx};
	</delete>
	<delete id="setaskStatusNoDel">
		delete from askS where idx = #{idx};
	</delete>
	<delete id="setAnsDel">
		delete from answerS where askIdx = #{idx};
	</delete>
	<delete id="setTopBtmCategoryDel">
		delete from btmCategoryS where topCategoryIdx = #{idx};
	</delete>
	<delete id="setTopMidCategoryDel">
		delete from midCategoryS where topCategoryIdx = #{idx};
	</delete>
	<delete id="setTopCategoryDel">
		delete from topCategoryS where idx = #{idx};
	</delete>
	<delete id="setMidBtmCategoryDel">
		delete from btmCategoryS where midCategoryIdx = #{idx};
	</delete>
	<delete id="setMidCategoryDel">
		delete from midCategoryS where idx = #{idx};
	</delete>
	<delete id="setBtmCategoryDel">
		delete from btmCategoryS where idx = #{idx};
	</delete>
	<delete id="setUsedReportNoDelete">
		delete from usedReportS where usedIdx = #{idx};
	</delete>
	<delete id="setUsedIdxDelete">
		delete from usedS where idx = #{usedIdx};
	</delete>
	<delete id="setfollowUsedAlarmDel">
		delete from followUsedAlarmS where usedIdx = #{usedIdx};
	</delete>
	<delete id="setEmoticonDel">
		delete from emoticonS where idx = #{idx};
	</delete>
	<delete id="setChattingDel">
		delete from chatS where idx = #{idx};
	</delete>
</mapper>