<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaProjectS4.dao.ChatDAO">
	<select id="getEmoticonList" resultType="com.spring.javaProjectS4.vo.EmoticonVO">
		select * from emoticonS order by idx desc;
	</select>
	<select id="getChatGroupCheck" resultType="com.spring.javaProjectS4.vo.ChatGroupVO">
		select * from chatGroupS where (mid1 = #{mid} or mid2 = #{mid}) and (mid1 = #{sMid} or mid2 = #{sMid}); 
	</select>
	<select id="getUsedIdx" resultType="com.spring.javaProjectS4.vo.UsedVO">
		select * from usedS where idx = #{usedIdx};
	</select>
	<select id="getChatGroupList" resultType="com.spring.javaProjectS4.vo.ChatGroupVO">
		select *,(select imgs from usedS u where cg.usedIdx = u.idx) as imgs,
		(select nickName from memberS mem where mem.mid = cg.mid1) as nickName1,
		(select nickName from memberS mem where mem.mid = cg.mid2) as nickName2,
		(select profile from memberS mem where mem.mid = cg.mid1) as profile1,
		(select profile from memberS mem where mem.mid = cg.mid2) as profile2,
		(select chat from chatS c where cg.idx = c.chatIdx order by idx desc limit 1 ) as chat,
		(select chatDate from chatS c where cg.idx = c.chatIdx order by idx desc limit 1 ) as cDate
		from chatGroupS cg where cg.mid1 = #{myMid} or cg.mid2 = #{myMid}
	</select>
	<select id="getMemberMid" resultType="com.spring.javaProjectS4.vo.MemberVO">
		select * from memberS where mid = #{mid};
	</select>
	<select id="getInnerChatInfo" resultType="com.spring.javaProjectS4.vo.ChatGroupVO">
		select cg.*,(select imgs from usedS u where cg.usedIdx = u.idx) as imgs,
		(select title from usedS u where cg.usedIdx = u.idx) as title,
		(select money from usedS u where cg.usedIdx = u.idx) as money,
		(select nickName from memberS mem where mem.mid = cg.mid1) as nickName1,
		(select nickName from memberS mem where mem.mid = cg.mid2) as nickName2,
		(select lastDate from memberS mem where mem.mid = cg.mid1) as lastDate1,
		(select lastDate from memberS mem where mem.mid = cg.mid2) as lastDate2
		from chatGroupS cg where cg.usedIdx = #{usedIdx} 
		and (cg.mid1 = #{mid} or cg.mid2 = #{mid}) and (cg.mid1 = #{sMid} or cg.mid2 = #{sMid}) group by cg.idx;
	</select>
	<select id="getChatting" resultType="com.spring.javaProjectS4.vo.ChatVO">
		select * from chatS where (mid1 = #{mid} or mid2 = #{mid}) and (mid1 = #{sMid} or mid2 = #{sMid});
	</select>
	<select id="getChatList" resultType="com.spring.javaProjectS4.vo.ChatVO">
		<if test="su == 30"> select * from chatS where idx > (select max(idx) - #{su} from chatS) 
		and (mid1 = #{mid1} or mid2 = #{mid1}) and (mid1 = #{mid2} or mid2 = #{mid2}) order by idx; </if>
		<if test="su != 30"> select * from chatS where idx > #{su} and (mid1 = #{mid1} or mid2 = #{mid1}) and (mid1 = #{mid2} or mid2 = #{mid2}) order by idx; </if>
	</select>
	
	<insert id="setChatGroupInput">
		insert into chatgroupS values (default,#{usedIdx},#{mid},#{sMid});
	</insert>
	<insert id="setFirstChat">
		insert into chatS values (default,#{idx},#{mid},#{sMid},0,#{title},default,default,#{whoMid});
	</insert>
	<insert id="setChatInput">
		insert into chatS values (default,#{chatIdx},#{mid1},#{mid2},#{emoticon},#{chat},default,default,#{whoMid});
	</insert>
	
	<update id="setUsedIdxUpdateChatG">
		update chatGroupS set usedIdx = #{usedIdx} where (mid1 = #{mid} or mid2 = #{mid}) and (mid1 = #{sMid} or mid2 = #{sMid});
	</update>
</mapper>